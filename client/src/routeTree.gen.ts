/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const ProductsIndexLazyImport = createFileRoute('/products/')()
const PaymentFailedIndexLazyImport = createFileRoute('/payment-failed/')()
const CartIndexLazyImport = createFileRoute('/cart/')()
const AboutIndexLazyImport = createFileRoute('/about/')()
const ProductsProductNameIndexLazyImport = createFileRoute(
  '/products/$productName/',
)()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ProductsIndexLazyRoute = ProductsIndexLazyImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/products/index.lazy').then((d) => d.Route),
)

const PaymentFailedIndexLazyRoute = PaymentFailedIndexLazyImport.update({
  id: '/payment-failed/',
  path: '/payment-failed/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/payment-failed/index.lazy').then((d) => d.Route),
)

const CartIndexLazyRoute = CartIndexLazyImport.update({
  id: '/cart/',
  path: '/cart/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/cart/index.lazy').then((d) => d.Route))

const AboutIndexLazyRoute = AboutIndexLazyImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about/index.lazy').then((d) => d.Route))

const ProductsProductNameIndexLazyRoute =
  ProductsProductNameIndexLazyImport.update({
    id: '/products/$productName/',
    path: '/products/$productName/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/products/$productName/index.lazy').then((d) => d.Route),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/about/': {
      id: '/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/cart/': {
      id: '/cart/'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof CartIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/payment-failed/': {
      id: '/payment-failed/'
      path: '/payment-failed'
      fullPath: '/payment-failed'
      preLoaderRoute: typeof PaymentFailedIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/products/': {
      id: '/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/products/$productName/': {
      id: '/products/$productName/'
      path: '/products/$productName'
      fullPath: '/products/$productName'
      preLoaderRoute: typeof ProductsProductNameIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutIndexLazyRoute
  '/cart': typeof CartIndexLazyRoute
  '/payment-failed': typeof PaymentFailedIndexLazyRoute
  '/products': typeof ProductsIndexLazyRoute
  '/products/$productName': typeof ProductsProductNameIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutIndexLazyRoute
  '/cart': typeof CartIndexLazyRoute
  '/payment-failed': typeof PaymentFailedIndexLazyRoute
  '/products': typeof ProductsIndexLazyRoute
  '/products/$productName': typeof ProductsProductNameIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/about/': typeof AboutIndexLazyRoute
  '/cart/': typeof CartIndexLazyRoute
  '/payment-failed/': typeof PaymentFailedIndexLazyRoute
  '/products/': typeof ProductsIndexLazyRoute
  '/products/$productName/': typeof ProductsProductNameIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/cart'
    | '/payment-failed'
    | '/products'
    | '/products/$productName'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/cart'
    | '/payment-failed'
    | '/products'
    | '/products/$productName'
  id:
    | '__root__'
    | '/'
    | '/about/'
    | '/cart/'
    | '/payment-failed/'
    | '/products/'
    | '/products/$productName/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AboutIndexLazyRoute: typeof AboutIndexLazyRoute
  CartIndexLazyRoute: typeof CartIndexLazyRoute
  PaymentFailedIndexLazyRoute: typeof PaymentFailedIndexLazyRoute
  ProductsIndexLazyRoute: typeof ProductsIndexLazyRoute
  ProductsProductNameIndexLazyRoute: typeof ProductsProductNameIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AboutIndexLazyRoute: AboutIndexLazyRoute,
  CartIndexLazyRoute: CartIndexLazyRoute,
  PaymentFailedIndexLazyRoute: PaymentFailedIndexLazyRoute,
  ProductsIndexLazyRoute: ProductsIndexLazyRoute,
  ProductsProductNameIndexLazyRoute: ProductsProductNameIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about/",
        "/cart/",
        "/payment-failed/",
        "/products/",
        "/products/$productName/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/about/": {
      "filePath": "about/index.lazy.tsx"
    },
    "/cart/": {
      "filePath": "cart/index.lazy.tsx"
    },
    "/payment-failed/": {
      "filePath": "payment-failed/index.lazy.tsx"
    },
    "/products/": {
      "filePath": "products/index.lazy.tsx"
    },
    "/products/$productName/": {
      "filePath": "products/$productName/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
